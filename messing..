#include "iostream"
#include "stdlib.h"
#include "time.h"
#include "string"
//#include "conio.h"

/*bool recursiveSolve(int x, int y , int endX, int endY, int **maze, bool **wasHere, bool **correctPath, int size) {
    if (x == endX && y == endY) return true; // If you reached the end
    if (maze[x][y] == 2 || wasHere[x][y]) return false;  
    // If you are on a wall or already were here
    wasHere[x][y] = true;
    if (x != 0) // Checks if not on left edge
        if (recursiveSolve(x-1, y, endX, endY, maze, wasHere, correctPath, size)) { // Recalls method one to the left
            correctPath[x][y] = true; // Sets that path value to true;
            return true;
        }
    if (x != size - 1) // Checks if not on right edge
        if (recursiveSolve(x+1, y, endX, endY, maze, wasHere, correctPath, size)) { // Recalls method one to the right
            correctPath[x][y] = true;
            return true;
        }
    if (y != 0)  // Checks if not on top edge
        if (recursiveSolve(x, y-1, endX, endY, maze, wasHere, correctPath, size)) { // Recalls method one up
            correctPath[x][y] = true;
            return true;
        }
    if (y != size - 1) // Checks if not on bottom edge
        if (recursiveSolve(x, y+1, endX, endY, maze, wasHere, correctPath, size)) { // Recalls method one down
            correctPath[x][y] = true;
            return true;
        }
    return false;
}

void solveMaze(int size, int startX, int startY, int **maze, bool **wasHere, bool **correctPath, int endX, int endY) {
    //maze = generateMaze(); // Create Maze (1 = path, 2 = wall)
    for (int row = 0; row < size; row++)  
        // Sets boolean Arrays to default values
        for (int col = 0; col < size; col++){
            wasHere[row][col] = false;
            correctPath[row][col] = false;
        }
	bool b;
    b = recursiveSolve(startX, startY, endX, endY, maze, wasHere, correctPath, size);
    // Will leave you with a boolean array (correctPath) 
    // with the path indicated by true values.
    // If b is false, there is no solution to the maze
}

void memo(int size, int **maze, int **mem)
{
	for(int x = 0; x < size; ++x){
	for(int y = 0; y < size; ++y){
		maze[x][y] = mem[x][y];
	}
	}
}*/
int up(int size, int **maze, int x, int y)
{
	maze[x][y] = 4;
	maze[x][y-1] = 5;
	return 0;
}
int down(int size, int **maze, int x, int y)
{
	maze[x][y] = 4;
	maze[x][y+1] = 5;
	return 0;
}
int left(int size, int **maze, int x, int y)
{
	maze[x][y] = 4;
	maze[x-1][y] = 5;
	return 0;
}
int right(int size, int **maze, int x, int y)
{
	maze[x][y] = 4;
	maze[x+1][y] = 5;
	return 0;
}

int none()
{
    return 0;
}

int traverse(int **maze, int x, int y, int z, int size)
{
	if(maze[x][y] < 0)
	{
		return 0;
	}
	if(maze[x][y] == 9)
	{
		return 1; //reach goal
	}
	if(maze[x][y] == 3 || maze[x][y] == 0)
	{
		return 0;
	}
	maze[x][y] = 6;
	if(traverse(maze, x, y, up(size, maze, x, y), size) == true)
	{
		return 2;
	}
	if(traverse(maze, x, y, down(size, maze, x, y), size) == true)
	{
		return 3;
	}
	if(traverse(maze, x, y, left(size, maze, x, y), size) == true)
	{
		return 4;
	}
	if(traverse(maze, x, y, right(size, maze, x, y), size) == true)
	{
		return 5;
	}
	maze[x][y] = 4;
	return 0;
}

void monster(int **maze, int size)
{
    int x, y;
	for (int mx = 0; mx < size ; mx++ ){
    for (int my = 0 ; my < size ; my++ ){
		if(maze[mx][my] == 5)
		{
			x = mx;
			y = my;
		}
	}
	}
    
    int r;
    r = traverse(maze, x, y, none, size);
    
    if(r == 2)
    {
        up(size, maze, x, y);
    }
    else if(r == 3)
    {
        down(size, maze, x, y);
    }
    else if(r == 4)
    {
        left(size, maze, x, y);
    }
    else if(r == 5)
    {
        right(size, maze, x, y);
    }
}

void printMaze(int size, int **maze){
    for (int y = 0; y < size ; y++ ){
    for (int x = 0 ; x < size ; x++ ){
        if (maze[x][y] == 3 || maze[x][y] == 0){
            std::cout << '#';
		}else if(maze[x][y] == 4 || maze[x][y] == 6){
			std::cout << ' ';
        }else if (maze[x][y] == 9){
            std::cout << 'O';
        }else if(maze[x][y] == 5){
			std::cout << 'M';
		}else {
            std::cout << ' ';
        }
    }std::cout << std::endl;}
}

int availableway (int **M , int dir , int x , int y){
	if (dir == 1 ){
		for (int a = 1; a <= 2; a++){if (M[x + a][y] == 3 || M[x + a][y] == 1 ){return 1;}}
	}else if ( dir == 2){
		for (int a = 1; a <= 2; a ++){if (M[x][y + a] == 3 || M[x][y + a] == 1 ){return 1;}}
	}else if (dir == 3 ){
		for (int a = 1; a <= 2 ; a++){if (M[x - a][y] == 3 || M[x - a][y] == 1 ){return 1;}}
	}else if (dir == 4){
		for ( int a = 1; a <= 2 ; a ++){if (M[x][y - a] == 3 || M[x][y - a] == 1 ){return 1;}}
	}
	return 0;
}

int error(int **M , int x , int y){
	for (int a = 1; a < 5 ; a++){if (availableway(M , a , x, y) == 0){return 1;}}
	return 0;
}

int available (int **M, int  size){
	for (int y = 1; y < size - 1 ; y+= 2){
		for (int x = 1; x < size - 1 ; x+=2){
			for (int dir = 1; dir <= 4 ; dir ++){
				if (availableway(M , dir , x , y) == 0){return 1;}
			}
		}
	}
	return 0;
}

int main()
{
	int r, direction;
	srand (time (NULL));

    int size = 40 + rand()%20;
    if (size%2 == 0){
        size++;
    }

	int **maze;
	maze = new int *[size];
	for(int i = 0; i < size; i++){
    	maze[i] = new int[size];
	}


	for (int x = 1; x < size - 1 ; x++ ){
		for (int y = 1 ; y < size - 1 ; y++ ){
			maze[x][y] = 0;
		}
	}
	maze[1][0] = 1;; maze [size - 2][size - 1] = 1;
	for (int x = 2 ; x < size - 1 ; x ++){
		maze[x][0] = 3; maze[size - 1 - x][size - 1] = 3;
	}
	for (int y = 0 ; y < size ; y ++){
		maze[0][y] = 3; maze[size - 1][y] = 3;
	}


	/*bool **wasHere;
	wasHere = new bool *[size];
	for(int i = 0; i < size; i++){
    	wasHere[i] = new bool[size];
	}

	bool **correctPath; // The solution to the maze
	correctPath = new bool *[size];
	for(int i = 0; i < size; i++){
    	correctPath[i] = new bool[size];
	}

	int startX, startY; // Starting X and Y values of maze
	int endX, endY;     // Ending X and Y values of maze*/

	bool L = true , U = true;
	int X = 1, Y = 1, lastdir, n;
	maze[1][1] = 1;
	while (maze[size - 2][size - 2] == 0){
		n = rand() % 12 + 1;
		if (n > 10){
			r = n - 8;
		}else {
			r = n % 2 + 1;
		}

		if (X == size - 2 || X == 1){
			U = false;
		}else if (Y == size - 2 || Y == 1){
			L = false;
		}else {
			U = true; L = true;
		}

		if (error(maze, X , Y) == 0){
			if (lastdir == 1){
				for (int a = 0; a < 2 ; a++ ){
					X--;
					maze[X][Y] = 0;
				}
			}else if (lastdir == 2){
				for (int a = 0; a < 2 ; a++ ){
					Y--;
					maze[X][Y] = 0;
				}
			}else if (lastdir == 3){
				for (int a = 0; a < 2 ; a++ ){
					X++;
					maze[X][Y] = 0;
				}
			}else if (lastdir == 4){
				for (int a = 0; a < 2 ; a++ ){
					Y++;
					maze[X][Y] = 0;
				}
			}
		}

		if (availableway(maze, r , X , Y) == 0){
			if (r == 1){
				for (int a = 0; a < 2 ; a++ ){
					X++;
					maze[X][Y] = 1;
				}
				lastdir = r;
			}else if (r == 2){
				for (int a = 0; a < 2 ; a++ ){
					Y++;
					maze[X][Y] = 1;
				}
				lastdir = r;
			}else if (r == 3 && L == true){
				for (int a = 0; a < 2 ; a++ ){
					X--;
					maze[X][Y] = 1;
				}
				lastdir = r;
			}else if (r == 4 && U == true){
				for (int a = 0; a < 2 ; a++ ){
					Y--;
					maze[X][Y] = 1;
				}
				lastdir = r;
			}
		}
	}

	while (available(maze, size) != 0){
		for (int y = 1 ; y < size - 1 ; y += 2){
			for (int x = 1 ; x < size - 1 ; x += 2){
				r = rand() % 4 + 1;
				if (availableway(maze , r , x , y) == 0){
					if (maze[x][y] == 1 || maze[x][y] == 2){
						if (r == 1){
							for (int a = 1; a <= 2 ; a++ ){
								maze[x + a][y] = 1;
							}
						}else if (r == 2){
							for (int a = 1; a <= 2 ; a++ ){
								maze[x][y + a] = 1;
							}
						}else if (r == 3){
							for (int a = 1; a <= 2 ; a++ ){
								maze[x - a][y] = 1;
							}
						}else{
							for (int a = 1; a <= 2 ; a++ ){
								maze[x][y - a] = 1;
							}
						}
					}
				}
			}
		}
	}

	int l = 0;
	while(l < 10)
	{
		int mx = rand()%40;
		int my = rand()%40;
		if(maze[mx][my] != 3 && maze[mx][my] != 0 && maze[mx][my] != 9)
		{
			maze[mx][my] = 5;
			l++;
		}
	}

	maze[1][0] = 9;
	for (int y = 0; y < size ; y++ ){
    for (int x = 0 ; x < size ; x++ ){
        if (maze[x][y] == 3 || maze[x][y] == 0){
            std::cout << '#';
		}else if(maze[x][y] == 4 || maze[x][y] == 6){
			std::cout << ' ';
        }else if (maze[x][y] == 9){
            std::cout << 'O';
        }else if(maze[x][y] == 5){
			std::cout << 'M';
		}else {
            std::cout << ' ';
        }
    }std::cout << std::endl;}


	std::cout << "Use |  W  | to move" << std::endl;
	std::cout << "    |A S D|" <<std::endl;
	std::cout << "type (e) to exit" << std::endl;
	char Mo;
	int pX = 1, pY = 0, lapo = 1, moves = 0;
	float  t;
	t = clock();

	while (maze[size - 2][size - 1] != 9 && Mo != 'e'){

		//Mo = getch();
		std::cin >> Mo;
			if (Mo == 'w' && pY > 0 && maze[pX][pY - 1] != 3 && maze[pX][pY - 1] != 0 ){
				maze[pX][pY] =  lapo;
				lapo = maze[pX][pY - 1];
				maze[pX][pY - 1] = 9;
				pY--;
			}else if (Mo == 's' && maze[pX][pY + 1] != 3 && maze[pX][pY + 1] != 0 ){
				maze[pX][pY] =  lapo;
				lapo = maze[pX][pY + 1];
				maze[pX][pY + 1] = 9;
				pY++;
			}else if (Mo == 'd' && maze[pX + 1][pY] != 3 && maze[pX + 1][pY] != 0){
				maze[pX][pY] =  lapo;
				lapo = maze[pX + 1][pY];
				maze[pX + 1][pY] = 9;
				pX++;
			}else if (Mo == 'a' && maze[pX - 1][pY] != 3 && maze[pX - 1][pY] != 0){
				maze[pX][pY] =  lapo;
				lapo = maze[pX - 1][pY];
				maze[pX - 1][pY] = 9;
				pX--;
			}
		moves++;
        system("cls");
        printMaze(size, maze);
	}
	std::cout << "You need " << moves << " moves and " << (clock() - t)/CLOCKS_PER_SEC << " second to finish this maze" << std::endl ;
	//getch();
	return 0;
}
